// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  // Relation avec le billborad
  billboards Billboard[] @relation("StoreToBillboard")
  //Reletion avec les catégories
  categories Category[]  @relation("StoreToCategory")
  contact    Contact?    @relation("StoreToContact")
  about      About?      @relation("StoreToAbout")
  reviews    Review[]    @relation("StoreToReview")
  questions  Question[]  @relation("StoreToQuestion")
  //Relation avec Size
  sizes      Size[]      @relation("StoreToSize")
  //Relation avec Color
  colors     Color[]     @relation("StoreToColor")
  //Relation avec Product
  products   Product[]   @relation("StoreToProduct")

  //Relation avec Order
  orders   Order[]  @relation("StoreToOrder")
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  //  le Billboard existe que dans un store specifique
  storeId    String
  // Relation entre le store et le billboard et la relation doit aussi etre dans le Store model
  // id est le id du Store dans la référence
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageURL   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt()

  // A rajouter sinon la relation store donne une erreur
  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  porduct     Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([colorId])
  @@index([sizeId])
}

//Pour les images multiples dans le product
model Image {
  id        String   @id @default(uuid())
  productId String
  // onDelete Cascade permet de supprimer les images lors de la suppression du produit
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Contact {
  id        String @id @default(uuid())
  storeId   String @unique
  store     Store  @relation("StoreToContact", fields: [storeId], references: [id])
  firstname String @default("")
  name      String @default("")
  imageURL  String @default("")
  phone     String @default("")
  mail      String @default("")

  adress        String @default("") // pour la rue et le numéro de la rue
  postal        String @default("") // Pour le code postal et le nom de la ville
  country       String @default("") // Et bien renseigner que l'on est en france
  imageURLPlace String @default("") // Prendre en photo le lieu du magasin

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Review {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToReview", fields: [storeId], references: [id])
  source    String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Question {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToQuestion", fields: [storeId], references: [id])
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model About {
  id                  String  @id @default(uuid())
  storeId             String  @unique
  store               Store   @relation("StoreToAbout", fields: [storeId], references: [id])
  introduction        String?  @default("") // Company name  , vision et mission
  history             String?  @default("")
  team                String?  @default("") // key members and their value
  services            String?  @default("") // general product and why you are different
  personnalMotivation String?  @default("") // why you start this
  putForward          String?  @default("") // hightlight these main achievements
  value               String?  @default("") // what's your personnal value

  introPicture               String?  @default("")
  historyPicture             String?  @default("")
  teamPicture                String?  @default("")
  servicesPicture            String?  @default("")
  personnalMotivationPicture String?  @default("")
  putForwardPicture          String?  @default("")
  valuePicture               String?  @default("")

  @@index([storeId])
}
